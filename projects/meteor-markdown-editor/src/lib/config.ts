/**
 * Configuration module for Meteor Markdown Editor
 * 
 * This module integrates with the ArtifactVirtual configuration system.
 * It loads configuration from the JSON file generated by the Python config system.
 */

// Types for our configuration structure
export interface AIAssistantConfig {
  enabled: boolean;
  default_model: string;
  show_model_details: boolean;
}

export interface SourceControlConfig {
  enabled: boolean;
  auto_commit: boolean;
  commit_interval_minutes: number;
}

export interface FeaturesConfig {
  ai_assistant: AIAssistantConfig;
  source_control: SourceControlConfig;
}

export interface UIConfig {
  theme: 'light' | 'dark' | 'system';
  default_preview_mode: 'split' | 'editor' | 'preview' | 'focus';
  sidebar_open_by_default: boolean;
  show_line_numbers: boolean;
  font_size: number;
  font_family: string;
  highlight_current_line: boolean;
  enable_syntax_highlighting: boolean;
}

export interface EditorConfig {
  tab_size: number;
  use_tabs: boolean;
  word_wrap: boolean;
  spell_check: boolean;
  auto_format_on_save: boolean;
  markdown_extensions: string[];
}

export interface ApiConfig {
  base_url: string;
  timeout_ms: number;
  retry_attempts: number;
  retry_delay_ms: number;
}

export interface StorageConfig {
  save_location: 'local' | 'cloud' | 'github';
  local_storage_key: string;
  backup_interval_minutes: number;
  max_backup_count: number;
}

export interface IntegrationsConfig {
  github: {
    client_id: string;
    redirect_uri: string;
  };
  dev_to: {
    api_key: string;
  };
  hashnode: {
    api_key: string;
  };
}

export interface AppConfig {
  name: string;
  version: string;
  debug: boolean;
  auto_save_interval_ms: number;
}

export interface ConfigData {
  app: AppConfig;
  ui: UIConfig;
  features: FeaturesConfig;
  editor: EditorConfig;
  api: ApiConfig;
  storage: StorageConfig;
  integrations: IntegrationsConfig;
}

// Default config used before loading or if loading fails
const defaultConfig: ConfigData = {
  app: {
    name: "Meteor Markdown Editor",
    version: "1.0.0",
    debug: false,
    auto_save_interval_ms: 5000
  },
  ui: {
    theme: "system",
    default_preview_mode: "split",
    sidebar_open_by_default: true,
    show_line_numbers: true,
    font_size: 16,
    font_family: "system-ui, sans-serif",
    highlight_current_line: true,
    enable_syntax_highlighting: true
  },
  features: {
    ai_assistant: {
      enabled: true,
      default_model: "local-distilgpt2",
      show_model_details: false
    },
    source_control: {
      enabled: true,
      auto_commit: false,
      commit_interval_minutes: 30
    }
  },
  editor: {
    tab_size: 2,
    use_tabs: false,
    word_wrap: true,
    spell_check: true,
    auto_format_on_save: false,
    markdown_extensions: ["tables", "strikethrough", "autolink", "tasklists"]
  },
  api: {
    base_url: "http://localhost:3001",
    timeout_ms: 30000,
    retry_attempts: 3,
    retry_delay_ms: 1000
  },
  storage: {
    save_location: "local",
    local_storage_key: "meteor-markdown-editor",
    backup_interval_minutes: 10,
    max_backup_count: 5
  },
  integrations: {
    github: {
      client_id: "",
      redirect_uri: "http://localhost:5173/auth/callback"
    },
    dev_to: {
      api_key: ""
    },
    hashnode: {
      api_key: ""
    }
  }
};

/**
 * Configuration class for accessing application settings
 */
class Config {
  private static instance: Config;
  private config: ConfigData = defaultConfig;
  private isLoaded: boolean = false;
  
  private constructor() {}
  
  /**
   * Get the singleton instance
   */
  public static getInstance(): Config {
    if (!Config.instance) {
      Config.instance = new Config();
    }
    return Config.instance;
  }
  
  /**
   * Load configuration from the server
   */
  public async load(): Promise<void> {
    if (this.isLoaded) return;
    
    try {
      // Try to load from generated config file
      const response = await fetch('/config/meteor-markdown-config.json');
      
      if (response.ok) {
        const loadedConfig = await response.json();
        this.config = this.mergeConfigs(this.config, loadedConfig);
        console.log('Configuration loaded successfully');
      } else {
        console.warn('Failed to load configuration, using defaults', response.statusText);
      }
      
      // Look for overrides in localStorage for client-side preferences
      const localOverrides = localStorage.getItem('meteor-markdown-preferences');
      if (localOverrides) {
        try {
          const userPrefs = JSON.parse(localOverrides);
          this.config = this.mergeConfigs(this.config, userPrefs);
        } catch (e) {
          console.warn('Failed to parse local preferences', e);
        }
      }
      
      this.isLoaded = true;
    } catch (error) {
      console.error('Error loading configuration:', error);
      // Continue with default config
    }
  }
  
  /**
   * Get a configuration value by path
   * @param path Dot-notation path to the config value (e.g., 'features.ai_assistant.enabled')
   * @param defaultValue Default value if the path doesn't exist
   */
  public get<T>(path: string, defaultValue?: T): T {
    const parts = path.split('.');
    let value: any = this.config;
    
    for (const part of parts) {
      if (value === undefined || value === null) {
        return defaultValue as T;
      }
      value = value[part];
    }
    
    return (value !== undefined ? value : defaultValue) as T;
  }
  
  /**
   * Set a configuration value (will be stored in localStorage)
   * @param path Dot-notation path to the config value
   * @param value Value to set
   */
  public set<T>(path: string, value: T): void {
    const parts = path.split('.');
    let current: any = this.config;
    
    // Navigate to the parent object
    for (let i = 0; i < parts.length - 1; i++) {
      const part = parts[i];
      if (current[part] === undefined) {
        current[part] = {};
      }
      current = current[part];
    }
    
    // Set the value
    const lastPart = parts[parts.length - 1];
    current[lastPart] = value;
    
    // Save user preferences to localStorage
    this.saveUserPreferences();
  }
  
  /**
   * Save user preferences to localStorage
   */
  private saveUserPreferences(): void {
    const userPrefs = {
      ui: {
        theme: this.config.ui.theme,
        font_size: this.config.ui.font_size,
        font_family: this.config.ui.font_family,
      },
      editor: {
        tab_size: this.config.editor.tab_size,
        use_tabs: this.config.editor.use_tabs,
        word_wrap: this.config.editor.word_wrap,
      },
      features: {
        ai_assistant: {
          enabled: this.config.features.ai_assistant.enabled,
          default_model: this.config.features.ai_assistant.default_model,
        }
      }
    };
    
    localStorage.setItem('meteor-markdown-preferences', JSON.stringify(userPrefs));
  }
  
  /**
   * Merge configs, with the second one taking precedence
   */
  private mergeConfigs(base: any, override: any): any {
    const result = { ...base };
    
    for (const key in override) {
      if (
        typeof override[key] === 'object' && 
        override[key] !== null && 
        !Array.isArray(override[key]) &&
        typeof base[key] === 'object' &&
        base[key] !== null
      ) {
        result[key] = this.mergeConfigs(base[key], override[key]);
      } else if (override[key] !== undefined) {
        result[key] = override[key];
      }
    }
    
    return result;
  }
  
  /**
   * Get the entire configuration object
   */
  public getAll(): ConfigData {
    return { ...this.config };
  }
}

// Export singleton instance
export const config = Config.getInstance();

// Initialize config
config.load().catch(error => {
  console.error('Failed to initialize configuration:', error);
});