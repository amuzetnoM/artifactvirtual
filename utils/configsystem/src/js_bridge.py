"""
JavaScript/TypeScript bridge for the ArtifactVirtual configuration system.

This module provides functionality to expose Python configurations to JavaScript/TypeScript
applications through a JSON config file or API endpoint.
"""

import json
import os
from pathlib import Path
from typing import Any, Dict, Optional

from .config_base import ConfigRegistry

def export_config_to_json(
    config_registry: ConfigRegistry,
    output_path: str,
    include_secrets: bool = False,
    secrets_fields: list[str] = None,
) -> Path:
    """
    Export configuration to a JSON file for JavaScript/TypeScript applications.
    
    Args:
        config_registry: The configuration registry to export
        output_path: Path to save the JSON file
        include_secrets: Whether to include secret values (default: False)
        secrets_fields: List of field names that should be masked
        
    Returns:
        Path to the generated JSON file
    """
    # Default secrets fields if not provided
    if secrets_fields is None:
        secrets_fields = [
            "api_key", "password", "secret", "token", "private_key",
            "client_secret", "access_token", "refresh_token"
        ]
    
    # Get configuration as dictionary
    config_dict = config_registry.to_dict()
    
    # Mask secret fields if specified
    if not include_secrets:
        for key, value in config_dict.items():
            if any(secret_field in key.lower() for secret_field in secrets_fields) and value:
                config_dict[key] = "***MASKED***"
    
    # Ensure output directory exists
    output_file = Path(output_path)
    output_file.parent.mkdir(parents=True, exist_ok=True)
    
    # Write configuration to file
    with open(output_file, 'w') as f:
        json.dump(config_dict, f, indent=2, default=str)
    
    return output_file

def create_js_config_loader(config_file_path: str) -> str:
    """
    Create JavaScript code to load configuration from a JSON file.
    
    Args:
        config_file_path: Path to the JSON configuration file
        
    Returns:
        JavaScript code as a string
    """
    js_code = f"""
// Generated by ArtifactVirtual Configuration System
// Configuration loader for JavaScript/TypeScript

/**
 * Load configuration from {config_file_path}
 * @returns {Object} Configuration object
 */
export async function loadConfig() {{
  try {{
    const response = await fetch('{config_file_path}');
    if (!response.ok) {{
      throw new Error(`Failed to load configuration: ${{response.statusText}}`);
    }}
    return await response.json();
  }} catch (error) {{
    console.error('Error loading configuration:', error);
    return {{}};
  }}
}}

/**
 * Configuration singleton
 */
export class Config {{
  static #instance;
  #config = {{}};
  
  /**
   * Get the singleton instance
   * @returns {Config} The configuration instance
   */
  static getInstance() {{
    if (!Config.#instance) {{
      Config.#instance = new Config();
    }}
    return Config.#instance;
  }}
  
  /**
   * Initialize configuration
   * @returns {Promise<Config>} This config instance
   */
  async init() {{
    this.#config = await loadConfig();
    return this;
  }}
  
  /**
   * Get a configuration value
   * @param {string} key - Configuration key (dot-notation supported)
   * @param {any} defaultValue - Default value if key not found
   * @returns {any} Configuration value
   */
  get(key, defaultValue = undefined) {{
    const keys = key.split('.');
    let value = this.#config;
    
    for (const k of keys) {{
      if (value === undefined || value === null) {{
        return defaultValue;
      }}
      value = value[k];
    }}
    
    return value !== undefined ? value : defaultValue;
  }}
  
  /**
   * Set a configuration value (runtime only)
   * @param {string} key - Configuration key (dot-notation supported)
   * @param {any} value - Value to set
   */
  set(key, value) {{
    const keys = key.split('.');
    let current = this.#config;
    
    for (let i = 0; i < keys.length - 1; i++) {{
      const k = keys[i];
      if (!current[k] || typeof current[k] !== 'object') {{
        current[k] = {{}};
      }}
      current = current[k];
    }}
    
    current[keys[keys.length - 1]] = value;
  }}
}}

export default Config.getInstance();
"""
    return js_code

def create_typescript_types(config_registry: ConfigRegistry) -> str:
    """
    Generate TypeScript type definitions for the configuration.
    
    Args:
        config_registry: The configuration registry to generate types for
        
    Returns:
        TypeScript type definitions as a string
    """
    config_dict = config_registry.to_dict()
    
    def _generate_type_for_value(value: Any, indent: int = 2) -> str:
        indent_str = ' ' * indent
        
        if isinstance(value, dict):
            if not value:
                return 'Record<string, any>'
                
            fields = []
            for key, val in value.items():
                field_type = _generate_type_for_value(val, indent + 2)
                fields.append(f"{indent_str}{key}: {field_type};")
            
            return "{\n" + "\n".join(fields) + f"\n{' ' * (indent - 2)}}}"
        
        elif isinstance(value, list):
            if not value:
                return 'any[]'
            # Use the type of the first item as the array type
            item_type = _generate_type_for_value(value[0], indent)
            return f"{item_type}[]"
        
        elif isinstance(value, bool):
            return 'boolean'
        
        elif isinstance(value, int):
            return 'number'
        
        elif isinstance(value, float):
            return 'number'
        
        elif isinstance(value, str):
            return 'string'
        
        elif value is None:
            return 'null | undefined'
        
        else:
            return 'any'
    
    ts_type = _generate_type_for_value(config_dict)
    
    return f"""
// Generated by ArtifactVirtual Configuration System
// TypeScript type definitions for configuration

export type Config = {ts_type};

export interface ConfigManager {{
  get<T>(key: string, defaultValue?: T): T;
  set<T>(key: string, value: T): void;
}}
"""